package ua.com.webcamp.JavaAdv.Lesson03.Ex_08FSM;import java.io.BufferedReader;import java.io.FileReader;import java.util.Scanner;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * Created by Artem Vereschaka on 8/10/15. */public class Main {    public static final String ANSI_BLACK = "\u001B[30m";    public static final String ANSI_RED = "\u001B[31m";    public static final String ANSI_GREEN = "\u001B[32m";    public static final String ANSI_WHITE = "\u001B[37m";    public static final String ANSI_RESET = "\u001B[0m";    /**     * Reads all lines from file to array of strings     * @param path filepath     * @return Array of strings. String[]     */    public static String[] reader(String path)    {        try (BufferedReader br = new BufferedReader(new FileReader(path))) {            StringBuilder sb = new StringBuilder();            String line = br.readLine();            while (line != null) {                sb.append(line);                sb.append(System.lineSeparator());                line = br.readLine();            }            String everything = sb.toString();            String[] lines = everything.split(System.lineSeparator()); // may produce wrong string in different OS            return lines;        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    /**     * Solve the problem using standard tools for Regular Expression in Java     */    public static void standardRegExpr()    {        String[] s = reader("file.txt");        Pattern pattern = Pattern.compile("^<(\\+|-)(([0-5])*|([P-Z])*)>");        // 1. открывающая скобка <        // 2. знак + или -        // 3. затем может следовать набор цифр от 0 до 5 или набор букв от P до Z        // 4. закрывающая скобка >        Matcher matcher;        for (String some : s) {            matcher = pattern.matcher(some);            boolean isMatch = matcher.matches();            String color;            if (isMatch)                color = ANSI_GREEN;            else                color = ANSI_RED;            String result = String.format("%15s :: %s%5s%s", some, color, isMatch, ANSI_RESET);            System.out.println(result);        }    }    /**     * Solve the problem using our finite automaton based on switches     */    public static void switchFSMFile()    {        String[] s = reader("file.txt");        for (String some : s) {            FSM machine = new SwitchFSM();            boolean isMatch = machine.isMatch(some);            String color;            if (isMatch)                color = ANSI_GREEN;            else                color = ANSI_RED;            String result = String.format("%15s :: %s%5s%s", some, color, isMatch, ANSI_RESET);            System.out.println(result);        }    }    //the same but without file    public static void switchFSMManual()    {        Scanner sc = new Scanner(System.in);        System.out.println("Enter the string to be matching");        String some = sc.nextLine();        FSM machine = new SwitchFSM(); // or Switch2FSM        boolean isMatch = machine.isMatch(some);        String color;        if (isMatch)            color = ANSI_GREEN;        else            color = ANSI_RED;        String result = String.format("Result :: %s%5s%s", color, isMatch, ANSI_RESET);        System.out.println(result);    }    public static void main(String[] args)    {        System.out.println("Standard tools");        standardRegExpr();        System.out.println();        System.out.println("Finite state machine #1");        switchFSMFile();        //switchFSMManual();    }}